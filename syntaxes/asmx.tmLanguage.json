{
    "name": "AsmX modern lang programming",
    "scopeName":"source.asmX",

    "patterns": [
		{
			"begin": "(^[ \\t]+)?(?=#)",

			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.asmX"
				}
			},

			"end": "(?!\\G)",
		
			"patterns": [
				{
					"begin": "#",
					
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.asmX"
						}
					},

					"end": "\\n",
					"name": "comment.line.number-sign.asmX"
				}
			]
		},
		
        {
            "include": "#ctrl-statements"
        },

        {
            "include": "#numbers"
        },

        {
            "include": "#expression"
        },

        {
            "include": "#strings"
        },

        {
            "include": "#structures"
        },

        {
            "include": "#grammar-instruction"
        },

        {
            "include": "#grammar-argument"
        },

        {
            "include": "#grammar-using-instruction"
        },

		{
			"include": "#types"
		}
    ],

    "repository" : {
        "expression": {
            "patterns": [{ "include": "#letter" }, { "include": "#paren-expression" }]
        },

        "paren-expression": {
            "begin": "\\(",
            "end": "\\)",

            "beginCaptures": {
              "0": { "name": "punctuation.paren.open" }
            },

            "endCaptures": {
              "0": { "name": "punctuation.paren.close" }
            },

            "name": "expression.group",
            "patterns": [{ "include": "#expression" }]
        },

        "structures": {
            "patterns": [
                {
					"captures": {
						"1": {
							"name": "storage.modifier.asmX"
						},
                        
						"2": {
							"name": "entity.name.type.class.asmX"
						}
					},

					"match": "(\\@[L|l]abel|\\@[S|s]ubprogram|\\@[E|e]nviroment)\\s+([\\w$]+)",
					"name": "meta.class.identifier.asmX"
				}
            ]
        },

        "grammar-instruction": {
            "patterns": [
                {
                    "name": "keyword.control.asmX",
                    "match": "(\\@\\w+)"
                }
            ]
        },

        "grammar-argument": {
            "patterns": [
                {
                    "name": "variable.parameter.asmX",
                    "match": "(\\$\\w+)"
                }
            ]
        },

        "grammar-using-instruction": {
            "patterns": [
                {
                    "captures": {
						"1": {
							"name": "storage.modifier.asmX"
						},

                        "2": {
                            "name": "support.class.asmX"
                        },
                        
						"3": {
							"name": "entity.name.type.class.asmX"
						}
                    },
                    
					"match": "(\\@[U|u]sing)\\s+(\\w+)\\s+(\\w+)",
					"name": "meta.class.identifier.asmX"
                }
            ]
        },

		"grammar-constant": {
			"patterns": [
				{
					"match": "([A-Z]+(_[A-Z]+)*)",
					"name": "variable.other.constant.asmX"
				}
			]
		},

		"types": {
			"patterns": [
				{
					"match": "(String|Int|Float|Bool)",
					"name": "entity.name.type.asmX"
				}
			]
		},

        "ctrl-statements": {
            "patterns": [
				{
					"name": "keyword.control.asmX",
					"match": "\\b(\\@[U|u]nit)\\b(?![,:])"
				},

				{		
					"name": "keyword.operator.asmX",
					"match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)"
				}
            ]
        },

        "numbers": {
            "patterns": [
                {
                    "name": "keyword.other.unit.suffix.integer.asmX",
                    "match": "(^-?[0-9][0-9\\.]+$)"
                },

				{
					"name": "constant.numeric.float.hexadecimal.asmX",
					"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?"
				},

				{
					"name": "constant.numeric.integer.hexadecimal.asmX",
					"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])"
				},

				{
					"name": "constant.numeric.float.asmX",
					"match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?"
				},

				{
					"name": "constant.numeric.integer.asmX",
					"match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])"
				}
            ]
        },

        "strings": {
			"patterns": [
				{
					"include": "#qstring-single"
				},

				{
					"include": "#qstring-double"
				},

				{
					"include": "#template"
				}
			]
		},

		"qstring-double": {
			"name": "string.quoted.double.js",
			"begin": "\"",

			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.js"
				}
			},

			"end": "(\")|((?:[^\\\\\\n])$)",

			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.js"
				},

				"2": {
					"name": "invalid.illegal.newline.js"
				}
			},

			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},

		"qstring-single": {
			"name": "string.quoted.single.js",
			"begin": "'",

			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.js"
				}
			},

			"end": "(\\')|((?:[^\\\\\\n])$)",

			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.js"
				},

				"2": {
					"name": "invalid.illegal.newline.js"
				}
			},

			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},

		"string-character-escape": {
			"name": "constant.character.escape.js",
			"match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		}
    }
}